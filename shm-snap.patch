From 3041ee0d1ceaa7b2371a7dcfe4c9fd52a28c6c45 Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Tue, 16 May 2023 15:34:27 +0100
Subject: [PATCH] SHMDIR: add support for SNAP_SHM_SUB_DIR and SNAP_SHM_PREFIX
 when using SHMDIR

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>
---
 posix/shm-directory.c      | 32 ++++++++++++++++++++++++
 sysdeps/pthread/sem_open.c | 51 +++++++++++++++++++++++++++++++++++++-
 2 files changed, 82 insertions(+), 1 deletion(-)

diff --git a/posix/shm-directory.c b/posix/shm-directory.c
index 76ea825b..4f15c200 100644
--- a/posix/shm-directory.c
+++ b/posix/shm-directory.c
@@ -21,9 +21,13 @@
 #if _POSIX_MAPPED_FILES
 
 #include <alloc_buffer.h>
+#include <errno.h>
 #include <shm-directory.h>
+#include <stdio.h>
 #include <string.h>
 
+int check_for_snap_prefix(struct shmdir_name *result, struct alloc_buffer *buf);
+
 int
 __shm_get_name (struct shmdir_name *result, const char *name, bool sem_prefix)
 {
@@ -34,6 +38,8 @@ __shm_get_name (struct shmdir_name *result, const char *name, bool sem_prefix)
   struct alloc_buffer buffer
     = alloc_buffer_create (result->name, sizeof (result->name));
   alloc_buffer_copy_bytes (&buffer, SHMDIR, strlen (SHMDIR));
+  if (check_for_snap_prefix(result, &buffer))
+     return -1;
   if (sem_prefix)
     alloc_buffer_copy_bytes (&buffer, "sem.", strlen ("sem."));
   alloc_buffer_copy_bytes (&buffer, name, namelen + 1);
@@ -44,4 +50,30 @@ __shm_get_name (struct shmdir_name *result, const char *name, bool sem_prefix)
 }
 libc_hidden_def (__shm_get_name)
 
+int
+check_for_snap_prefix(struct shmdir_name *result, struct alloc_buffer *buf)
+{
+  /* check if this is snappy system, and we should use sub dir */
+  const char *snap_sub_dir = getenv ("SNAP_SHM_SUB_DIR");
+  if (snap_sub_dir != NULL)
+  {
+    alloc_buffer_copy_bytes(buf, snap_sub_dir, strlen(snap_sub_dir));
+    alloc_buffer_copy_bytes(buf, "/", strlen("/"));
+    /* make sure directory exists */
+    int st = mkdir(result->name, 0777);
+    if (st == 0 || st == EEXIST)
+    {
+      return 0;
+    } else {
+      return st;
+    }
+  }
+  const char *snap_prefix = getenv ("SNAP_SHM_PREFIX");
+  if (snap_prefix != NULL)
+  {
+    alloc_buffer_copy_bytes(buf, snap_prefix, strlen(snap_prefix));
+  }
+  return 0;
+}
+
 #endif
diff --git a/sysdeps/pthread/sem_open.c b/sysdeps/pthread/sem_open.c
index add01d56..aad88c56 100644
--- a/sysdeps/pthread/sem_open.c
+++ b/sysdeps/pthread/sem_open.c
@@ -32,6 +32,8 @@
 # define __unlink unlink
 #endif
 
+int set_shmdir_path(char *path);
+
 sem_t *
 __sem_open (const char *name, int oflag, ...)
 {
@@ -116,7 +118,12 @@ __sem_open (const char *name, int oflag, ...)
       memset ((char *) &sem.initsem + sizeof (struct new_sem), '\0',
 	      sizeof (sem_t) - sizeof (struct new_sem));
 
-      char tmpfname[] = SHMDIR "sem.XXXXXX";
+      char tmpfname[NAME_MAX];
+      if (set_shmdir_path(tmpfname)) {
+        __set_errno (EINVAL);
+        result = SEM_FAILED;
+        goto out;
+      }
       int retries = 0;
 #define NRETRIES 50
       while (1)
@@ -225,3 +232,45 @@ compat_symbol (libpthread, __sem_open, sem_open, GLIBC_2_1_1);
 #else /* !PTHREAD_IN_LIBC */
 strong_alias (__sem_open, sem_open)
 #endif
+
+int
+set_shmdir_path(char *path)
+{
+  /* check if this is snappy system, and we should use sub dir */
+  const char *snap_sub_dir = getenv ("SNAP_SHM_SUB_DIR");
+  char* p = path;
+  int length = NAME_MAX;
+  strncpy(p, SHMDIR, length);
+  p += strlen(SHMDIR);
+  length -= strlen(SHMDIR);
+  if (snap_sub_dir != NULL)
+  {
+    strncpy(p, snap_sub_dir, length);
+    p += strlen(snap_sub_dir);
+    length -= strlen(snap_sub_dir);
+    strncpy(p, "/", length);
+    p += strlen("/");
+    length -= strlen("/");
+    *p = '\0';
+    /* make sure directory exists */
+    int st = mkdir(path, 0777);
+    if (st == 0 || st == EEXIST)
+    {
+      return 0;
+    } else {
+      return st;
+    }
+  }
+
+  const char *snap_prefix = getenv ("SNAP_SHM_PREFIX");
+  if (snap_prefix != NULL)
+  {
+    strncpy(p, snap_prefix, length);
+    p += strlen(snap_prefix);
+    length -= strlen(snap_prefix);
+  }
+  strncpy(p, "sem.XXXXXX", length);
+  p += strlen("sem.XXXXXX");
+  *p = '\0';
+  return 0;
+}
-- 
2.34.1

